{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,qEAAqE,KAAK,SAAS,OAAO;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,IAAI,OAAO,IAAI,sBAAsB,OAAO;AAC1H;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACf4C;AACF;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAU;AACxC;AACA;AACA;AACA;AACA,IAAI,oDAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C,kDAAkD,kBAAkB,sBAAsB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;UCjCjC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;ACN2D;AACP;AACF;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAa;AAC7B;AACA","sources":["webpack:///./src/js/modules/api.js","webpack:///./src/js/modules/form.js","webpack:///./src/js/modules/weather.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/app.js"],"sourcesContent":["const apiKey = `403a46430b72cd84dcf1d87acffaeeed`;\r\n\r\n// Функция для получения информации о городе\r\nasync function getCity(name) {\r\n    const geoUrl = `http://api.openweathermap.org/geo/1.0/direct?q=${name}&appid=${apiKey}`;\r\n    const response = await fetch(geoUrl);\r\n    return await response.json();\r\n}\r\n\r\n// Функция для получения информации о погоде\r\nasync function getWeather(lat, lon) {\r\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\r\n    const response = await fetch(weatherUrl);\r\n    return await response.json();\r\n}\r\n\r\nexport { getCity, getWeather };","import { getCity, getWeather } from './api';\r\nimport updateWeatherInfo from './weather';\r\n\r\nconst form = document.querySelector('#form');\r\nconst input = document.querySelector('#input');\r\nconst blockWeather = document.querySelector('.app-block__weather');\r\n\r\nasync function submitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const cityInfo = await getCity(input.value.trim());\r\n    if (cityInfo.length === 0) {\r\n        console.log('Город не найден');\r\n        input.value = '';\r\n        return;\r\n    }\r\n\r\n    const weatherInfo = await getWeather(cityInfo[0]['lat'], cityInfo[0]['lon']);\r\n    const tempCity = weatherInfo.main.temp;\r\n    const nameCity = weatherInfo.name;\r\n    const weatherCity = weatherInfo.weather[0].main;\r\n\r\n    updateWeatherInfo(tempCity, nameCity, weatherCity);\r\n    inputValid(input.value.trim());\r\n    input.value = '';\r\n}\r\n\r\n// Функция проверяет правильность введёного значения\r\nfunction inputValid(city) {\r\n    if (input.value.trim() === city) {\r\n        blockWeather.style.display = 'block';\r\n    } else if (!input.value) {\r\n        blockWeather.style.display = 'none';\r\n    }\r\n}\r\n\r\nexport { submitHandler, inputValid };","function updateWeatherInfo(tempCity, nameCity, weatherCity) {\r\n    const temperature = document.querySelector('#temperature');\r\n    const city = document.querySelector('#city');\r\n    const wrapperApp = document.querySelector('.app-wrapper__img');\r\n\r\n    const weathersImg = {\r\n        storm: 'img/storm.png',\r\n        cloudy: 'img/cloudy.png',\r\n        rain: 'img/rain.png',\r\n        sunny: 'img/sunny.png'\r\n    };\r\n\r\n    const roundedTemp = Math.round(tempCity);\r\n    temperature.textContent = `${roundedTemp}℃`;\r\n    temperature.style.cssText = 'font-size: 80px; font-weight: 400; font-family: inherit; color: #fff';\r\n\r\n    city.textContent = nameCity;\r\n\r\n    switch (weatherCity) {\r\n        case 'Clouds':\r\n        case 'Clear':\r\n            wrapperApp.src = weathersImg.cloudy;\r\n            console.log('Погода ясная');\r\n            break;\r\n        case 'Rain':\r\n            wrapperApp.src = weathersImg.rain;\r\n            console.log('Идёт дождь');\r\n            break;\r\n        default:\r\n            console.log('Погода не определена');\r\n    }\r\n}\r\n\r\nexport default updateWeatherInfo;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { submitHandler, inputValid } from './modules/form';\r\nimport { getCity, getWeather } from './modules/api';\r\nimport updateWeatherInfo from './modules/weather';\r\n\r\n// Переменные\r\nconst form = document.querySelector('#form');\r\nconst input = document.querySelector('#input');\r\nconst blockWeather = document.querySelector('.app-block__weather');\r\nconst wrapperApp = document.querySelector('.app-wrapper__img');\r\n\r\n// Обработчик события отправки формы\r\nform.onsubmit = submitHandler;\r\n\r\n// Экспортируем переменные для использования в других модулях, если это необходимо\r\nexport { form, input, blockWeather, wrapperApp, getCity, getWeather, updateWeatherInfo, inputValid };"],"names":[],"sourceRoot":""}